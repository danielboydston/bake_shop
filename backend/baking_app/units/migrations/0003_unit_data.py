# Generated by Django 4.2.7 on 2023-11-23 10:53
# Generated by Django 4.2.7 on 2023-11-22 11:57

from django.db import migrations
from ..models import Unit, UnitCategory, BaseUnit

def create_data(apps, schema_editor):
    #UnitCategory = apps.get_model('units', 'UnitCategory')
    #Unit = apps.get_model('units', 'Unit')
    #BaseUnit = apps.get_model('units', 'BaseUnit')
    
    imperial = Unit.UnitSystem.IMPERIAL
    metric = Unit.UnitSystem.METRIC
    universal = Unit.UnitSystem.UNIVERSAL

    each = UnitCategory(name="Each")
    each.save()
    each.unit_set.create(name="Each", abbr="ea", conversion_to_base="u", conversion_from_base="b", unit_system=universal)
    each.unit_set.create(name="Half Dozen", abbr="hdz", conversion_to_base="u / 6", conversion_from_base="b * 6", unit_system=universal)
    each.unit_set.create(name="Dozen", abbr="dz", conversion_to_base="u / 12", conversion_from_base="b * 12", unit_system=universal)

    temp = UnitCategory(name="Temperature")
    temp.save()
    temp.unit_set.create(name="Celcius", abbr="\u00b0C", conversion_to_base="u", conversion_from_base="b", unit_system=metric)
    temp.unit_set.create(name="Fahrenheit", abbr="\u00b0F", conversion_to_base="(u - 32) * 5 / 9", conversion_from_base="b * 9 / 5 + 32", unit_system=metric)

    weight = UnitCategory(name="Weight")
    weight.save()
    weight.unit_set.create(name="gram", abbr="g", conversion_to_base="u", conversion_from_base="b", unit_system=metric)
    weight.unit_set.create(name="Kilogram", abbr="kg", conversion_to_base="u * 1000", conversion_from_base="b / 1000", unit_system=metric)
    weight.unit_set.create(name="Pound", abbr="lbs", conversion_to_base="u * 453.592", conversion_from_base="b / 453.592", unit_system=imperial)
    weight.unit_set.create(name="Ounce", abbr="oz", conversion_to_base="u * 28.3495", conversion_from_base="b / 28.3495", unit_system=imperial)

    volume = UnitCategory(name="Volume")
    volume.save()
    volume.unit_set.create(name="milliliter", abbr="ml", conversion_to_base="u", conversion_from_base="b", unit_system=metric)
    volume.unit_set.create(name="liter", abbr="l", conversion_to_base="u * 1000", conversion_from_base="b / 1000", unit_system=metric)
    volume.unit_set.create(name="gallon", abbr="g", conversion_to_base="u * 3785.41178", conversion_from_base="b / 3785.41178", unit_system=imperial)
    volume.unit_set.create(name="fluid ounce", abbr="floz", conversion_to_base="u * 29.5735", conversion_from_base="b / 29.5735", unit_system=imperial)
    volume.unit_set.create(name="cup", abbr="cup", conversion_to_base="u * 236.58823", conversion_from_base="b / 236.58823", unit_system=imperial)
    volume.unit_set.create(name="tablespoon", abbr="tbsp", conversion_to_base="u * 14.78676", conversion_from_base="b / 14.78676", unit_system=imperial)
    volume.unit_set.create(name="teaspoon", abbr="tsp", conversion_to_base="u * 4.92892", conversion_from_base="b / 4.92892", unit_system=imperial)

    BaseUnit(category_id=each.id, unit_id=each.unit_set.get(name="Each").id).save()
    BaseUnit(category_id=temp.id, unit_id=temp.unit_set.get(name="Celcius").id).save()
    BaseUnit(category_id=weight.id, unit_id=weight.unit_set.get(name="gram").id).save()
    BaseUnit(category_id=volume.id, unit_id=volume.unit_set.get(name="milliliter").id).save()

class Migration(migrations.Migration):


    dependencies = [
        ('units', '0002_rename_category_id_baseunit_category_and_more'),
    ]

    operations = [
        migrations.RunPython(create_data)
    ]